<?php

// "Block" is a very generic name,
// but I can't think of a better one.
// "ParameterGroup" would almost do,
// but it's a bit misleading for things like BasicsHeaderBlock,
// which doesn't 'represent' any parameters.

abstract class Occasion
{
    const Request    = 1; // Request a clearance.
    const Adjudicate = 2; // Adjudicate a clearance request.
    const Display    = 3; // Display a clearance request.
    const Upload     = 4; // Upload an e-text matching an approved clearance request.
}

function block_class_names($occ)
{
    assert($occ == Occasion::Request
        || $occ == Occasion::Adjudicate
        || $occ == Occasion::Display
        || $occ == Occasion::Upload
    );

    $block_names = array(
        Occasion::Request => array(
            'Titles',
            'Language',
            'BookNotes',
            'Authors',
            'Publisher',
            'PubEvents',
            'PubNotes',
            'PageScans',
            'ScansArchive',
        ),

        Occasion::Adjudicate => array(
            'RequestId',       // set at request-time
            'RequestAuto',     // set at request-time
            'RequestKey',      // set at request-time
            'Status',          // set at request-time, updated later
            'PageScans',
            'ScansArchive',
            'BookNotes',
            'Titles',
            'Language',
            'Authors',
            'Publisher',
            'PubEvents',
            'PubNotes',
            'NotesToRequester', // set by admin
            'Ruling',           // set by admin
        ),

        Occasion::Display => array(
            'RequestId',
            'Status',
            'RequestKey',
            'NotesToRequester',
            'Titles',
            'Language',
            'Authors',
            'BookNotes',
            'RequestAuto',
            'Publisher',
            'PubNotes',
            'PubEvents',
            'ScansArchive',
            'PageScans',
            // omitted:
            // 'Ruling' (but it shows up under 'Status')
        ),

        Occasion::Upload => array(
            'Titles',
            'Language',
            'Authors',
            'ScansArchive',
            // None of the other properties are used at upload-time.
        ),
    )[$occ];

    $block_class_names = array();
    foreach ($block_names as $block_name)
    {
        $block_class_name = $block_name . "Block";
        $block_class_names[] = $block_class_name;
    }
    return $block_class_names;
}

function echo_html_for_form($occ, $cr)
// $cr is an associative array representing a clearance record.
{
    assert( is_null($cr) == ($occ == Occasion::Request) );
    // $cr is NULL iff $occ is Occasion::Request.

    foreach (block_class_names($occ) as $block_class_name)
    {
        $block_class_name::echo_html_for_form($occ, $cr);
    }
}

function validate_form_submission($occ)
// Validates the contents of $_REQUEST,
// using $blocks to specify the expected parameters.
// Either aborts with error messages,
// or returns an associative array
// suitable for passing to db_insert_one_row.
{
    $results = array();
    foreach (block_class_names($occ) as $block_class_name)
    {
        $results += $block_class_name::validate_form_submission($occ);
    }

    $errors = array();
    foreach ($results as $key => $value)
    {
        if (str_startswith($key, 'ERROR:')) $errors[] = $value;
    }

    if ($errors)
    {
        echo "<p><font color=\"red\">Error(s):\n";
        foreach ($errors as $err)
        {
            echo "<br>$err\n";
        }
        echo "<br>Please use your browser's <tt>back</tt> function to complete your entry.";
        echo "</font></p>\n";
        exit;
    }

    return $results;
}

function echo_html_for_table_display($occ, $cr)
{
    assert($occ == Occasion::Display);

    foreach (block_class_names($occ) as $block_class_name)
    {
        $block_class_name::echo_html_for_table_display($cr);
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Block
{
    static function validate_form_submission($occ)
    // Return an array of zero or more $name/$value pairs.
    //
    // Normally,
    // $name is the name of some property of the thing, and
    // $value is a valid value for that property.
    //
    // But if something goes wrong,
    // $name is 'ERROR:' followed by the name of a property, and
    // $value is an error message relating to that property.
    {
        $class_name = get_called_class();
        die("class '$class_name' must override validate_form_submission");
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class RequestIdBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        echo "<input type=\"hidden\" name=\"id\" value=\"" . $cr['id'] . "\">\n";
    }

    static function validate_form_submission($occ)
    {
        return array();
        // Its extraction/validation is handled outside the Blocks framework.
    }

    static function echo_html_for_table_display($cr)
    {
        echo_2col_tr("<i>Request ID</i>", $cr['id']);
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class TitlesBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "\n";
            echo "<p><strong>1. Fundamental facts about this book</strong> (title is required).\n";
        }

        // title
        echo "\n";
        echo "<br>";
        if ($occ == Occasion::Request) echo "1a. ";
        echo "Title:\n";
        echo "<input type=\"text\" size=\"50\" name=\"in_title\"";
        if (isset($cr)) echo " value=\"" . eha($cr['title']) . "\"";
        echo ">\n";
        echo_db_column_width(600, $occ);

        // subtitle
        echo "\n";
        echo "<br>";
        if ($occ == Occasion::Request) echo "1b. ";
        echo "Subtitle:\n";
        echo "<input type=\"text\" size=\"50\" name=\"in_subtitle\"";
        if (isset($cr)) echo " value=\"" . eha($cr['subtitle']) . "\"";
        echo ">\n";
        echo_db_column_width(600, $occ);
    }

    static function validate_form_submission($occ)
    {
        if (@$_REQUEST['in_title'] == '')
        {
            return array('ERROR:title' => "You must supply a title.");
        }

        return array(
            'title'         => @$_REQUEST['in_title'],
            'subtitle'      => @$_REQUEST['in_subtitle'],
        );
    }

    static function echo_html_for_table_display($cr)
    {
        echo_2col_tr("<i>Title</i>", ehe($cr['title']));
        if ($cr['subtitle'] != '')
        {
            echo_2col_tr("<i>Subtitle</i>", ehe($cr['subtitle']));
        }
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class LanguageBlock extends Block
{
    // Request:    Ask for name or code. Check it against langs table.
    // Adjudicate: Ask for name or code. Check it against langs table.
    // Upload:     Ask for name or code. Don't check it.

    static function echo_html_for_form($occ, $cr)
    {
        echo "\n";
        echo "<br>";
        if ($occ == Occasion::Request) echo "1c. ";
        echo "Main language";
        echo " (language name or two-letter ISO code):\n";
        $size = 12;
        echo "<input type=\"text\" size=\"$size\" name=\"in_language_code\"";
        if (isset($cr)) echo " value=\"" . eha($cr['language_code']) . "\"";
        echo ">\n";
    }

    static function validate_form_submission($occ)
    {
        if ($occ == Occasion::Request || $occ == Occasion::Adjudicate)
        {
            if (@$_REQUEST['in_language_code'] == '')
            {
                $language_code = "";
            }
            else
            {
                $result = check_language($_REQUEST['in_language_code'], 'cn');
                if (is_string($result))
                {
                    return array(
                        'ERROR:language_code' => $result,
                    );
                }
                else
                {
                    list($language_code, $language_name) = $result;
                }
            }
        }
        else
        {
            $language_code = @$_REQUEST['in_language_code'];
        }

        return array(
            'language_code' => $language_code,
        );
    }

    static function echo_html_for_table_display($cr)
    {
        echo_2col_tr("<i>Language code</i>", ehe($cr['language_code']));
    }
}

// -----------------------------------------------------------------------------

function maybe_convert_language_code($language_field, $show_error_message)
{
    if (strlen($language_field) > 2)
    {
        // It can't be a language code.
        return $language_field;
    }

    $result = check_language($language_field, 'c');
    if (is_string($result))
    {
        // Assume this means "there was no language originally".
        // (This applies to older clearances.)
        if ($show_error_message)
        {
            echo "<p><font color='red'>$result</font></p>\n";
        }
        return $language_field;
    }

    list($language_code, $language_name) = $result;

    return $language_name;
}

function check_language($language_arg, $what_to_check)
// Check whether $language_arg matches a language in the 'langs' table.
// Depends on $what_to_check:
//   'c' : check whether it's a valid language code.
//   'cn': check whether it's a valid language code or name.
// (Comparisons are case-insensitive.)
// Returns either an array (containing the language code and name in that order),
// or a string (containing an error message).
{
    $esc_language_arg = db_escape($language_arg);
    if ($what_to_check == 'c')
    {
        $condition = "language_code='$esc_language_arg'";
        $error = "No known language with code='$language_arg'";
    }
    elseif ($what_to_check == 'cn')
    {
        $condition = "language_code='$esc_language_arg' or language_string='$esc_language_arg'";
        $error = "No known language with code='$language_arg' or name='$language_arg'";
    }
    else
        die("bad value for \$what_to_check: '$what_to_check'");
    $query = "SELECT language_code, language_string from langs where $condition";
    $res = db_query_od($query);
    $row = db_fetch_row($res);
    if (!$row)
    {
        // i.e., there are 0 rows in the result-set.
        // i.e., there's no matching language
        return $error;
    }
    else
    {
        return $row;
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class BookNotesBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "\n";
            echo "<br>";
            echo "1d. ";
            echo "Any notes you would like to send to the clearance team:\n";
            echo "<br><textarea name=\"in_book_notes\" rows=\"2\" cols=\"55\"></textarea>\n";
            echo_db_column_width(6000, $occ);
            echo "</p>\n";
        }
        elseif ($occ == Occasion::Adjudicate)
        {
            if (strlen($cr['book_notes']) > 0)
            {
                echo "\n<br>Notes from submitter: <strong>"
                    . ehe($cr['book_notes'])
                    . "</strong>\n";
            }
        }
        else
        {
            assert(FALSE);
        }
    }

    static function validate_form_submission($occ)
    {
        if ($occ == Occasion::Request)
        {
            return array(
                'book_notes' => @$_REQUEST['in_book_notes'],
            );
        }
        elseif ($occ == Occasion::Adjudicate)
        {
            return array();
        }
        else
        {
            assert(FALSE);
        }

    }

    static function echo_html_for_table_display($cr)
    {
        if ($cr['book_notes'] != '')
        {
            echo_2col_tr("<i>Notes</i>", ehe($cr['book_notes']));
        }
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class AuthorsBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "\n";
            echo "<p><strong>2. Author/creator information</strong>. (Up to five author/creator/editor/etc., with roles.  At least one is required.  Include middle name[s] with firstname)\n";
        }

        for ($a = 1; $a <= 5; $a++)
        {
            if ($occ == Occasion::Request)
            {
                // Show all the widgets.
                $show_it = TRUE;
            }
            else
            {
                // Always show the widget for the first author;
                // for all others, show it if the previous was set.
                // (I.e., provide ONE extra author entry per form.)
                $am1 = $a - 1;
                $show_it = ($a == 1 || strlen($cr["author{$am1}_lastname"]) > 0);
            }

            if ($show_it)
            {
                echo "\n<br>";
                if ($occ == Occasion::Request)
                {
                    $letter = chr(ord('a') + $a - 1);
                    echo "2{$letter}. ";
                }
                echo "Author{$a}: ";

                echo "Firstname: ";
                echo "<input type=\"text\" size=\"20\" name=\"in_author{$a}_firstname\"";
                if (isset($cr)) echo " value=\"" . eha(@$cr["author{$a}_firstname"]) . "\"";
                echo ">\n";
                echo_db_column_width(150, $occ);

                echo "Lastname: ";
                echo "<input type=\"text\" size=\"20\" name=\"in_author{$a}_lastname\"";
                if (isset($cr)) echo " value=\"" . eha(@$cr["author{$a}_lastname"]) . "\"";
                echo ">\n";
                echo_db_column_width(150, $occ);

                echo "Role:\n";
                echo_selector_for_role("in_author{$a}_role", @$cr["author{$a}_role"]);
            }
        }

        if ($occ == Occasion::Request)
        {
            echo "</p>\n";
        }
    }

    static function validate_form_submission($occ)
    {
        if (@$_REQUEST['in_author1_lastname'] == '' && @$_REQUEST['in_author1_firstname'] == '')
        {
            return array('ERROR:in_author1' => "You must supply at least one author.");
        }

        // Munge author roles to 2-letter codes:
        fix_author_role();

        return array(
            'author1_lastname'   => @$_REQUEST['in_author1_lastname'],
            'author1_firstname'  => @$_REQUEST['in_author1_firstname'],
            'author1_role'       => @$_REQUEST['in_author1_role'],
            'author2_lastname'   => @$_REQUEST['in_author2_lastname'],
            'author2_firstname'  => @$_REQUEST['in_author2_firstname'],
            'author2_role'       => @$_REQUEST['in_author2_role'],
            'author3_lastname'   => @$_REQUEST['in_author3_lastname'],
            'author3_firstname'  => @$_REQUEST['in_author3_firstname'],
            'author3_role'       => @$_REQUEST['in_author3_role'],
            'author4_lastname'   => @$_REQUEST['in_author4_lastname'],
            'author4_firstname'  => @$_REQUEST['in_author4_firstname'],
            'author4_role'       => @$_REQUEST['in_author4_role'],
            'author5_lastname'   => @$_REQUEST['in_author5_lastname'],
            'author5_firstname'  => @$_REQUEST['in_author5_firstname'],
            'author5_role'       => @$_REQUEST['in_author5_role'],
        );
    }

    static function echo_html_for_table_display($cr)
    {
        $row0 = array("first name", "last name", "role");
        $rows = array();
        for ($a = 1; $a <= 5; $a++)
        {
            if ($cr["author{$a}_lastname"] != '')
            {
                $rows[] = array(
                    ehe($cr["author{$a}_firstname"]),
                    ehe($cr["author{$a}_lastname"]),
                    ehe(get_role_label_for_role_code($cr["author{$a}_role"]))
                );
            }
        }
        if ($rows)
        {
            echo_2col_tr("<i>Authors</i>", make_compact_table($row0, $rows));
        }
    }
}

// -------------------------------------------------------------------

$all_roles = array(
    'cr' => 'Author/Creator',
    'ed' => 'Editor',
    'tr' => 'Translator',
    'il' => 'Illustrator',
    'cp' => 'Compiler',
    'an' => 'Annotator',
    'cm' => 'Commentator',
    'Pe' => 'Performer',
    'Ph' => 'Photographer',
    'En' => 'Engraver',
    'Ar' => 'Artist',
    'Co' => 'Contributor',
    'uk' => 'Unknown role',
);

function echo_selector_for_role($control_name, $first_option_value='')
{
    global $all_roles;
    echo "<select name=\"$control_name\">\n";

    if ($first_option_value != '')
    {
        // Print this one first, even though it's duplicated below.
        if (isset($all_roles[$first_option_value]))
        {
            $label = $all_roles[$first_option_value];
        }
        elseif (in_array($first_option_value, $all_roles))
        {
            $label = $first_option_value;
        }
        else
        {
            die("bad role arg: '$first_option_value'");
        }
        echo "<option>$label</option>\n";
    }

    foreach ($all_roles as $role_code => $role_name)
    {
        echo "<option>$role_name</option>\n";
    }

    echo "</select>\n";
}

function get_role_param($array, $key)
{
    global $all_roles;

    assert(is_array($array));
    assert(is_string($key));

    $arg = @$array[$key];
    if (is_null($arg))
    {
        return '';
    }
    elseif (is_string($arg) && ($arg == '' || in_array($arg, $all_roles)))
    {
        return $arg;
    }
    else
    {
        $esc_arg = ehe($arg);
        echo "<p style='color:red'>Value passed to parameter '$key' is not a recognized role: '$esc_arg'</p>\n";
        exit;
    }
}

function get_role_label_for_role_code($role_code)
// Map a two-character role-code to a fuller description
{
    global $all_roles;

    if ($role_code == 'cr')
    {
        return "Creator";
        // ... rather than "Author/Creator" that the next would return
        // (though I'm not sure what difference it makes)
    }

    if (isset($all_roles[$role_code]))
    {
        return $all_roles[$role_code];
    }

    // Shouldn't be reached:
    return ($role_code);
}

function get_role_code_for_role_label($the_role_label)
{
    global $all_roles;

    if ($the_role_label == '') return '';

    foreach ($all_roles as $role_code => $role_label)
    {
        if ($role_label == $the_role_label)
        {
            return $role_code;
        }
    }

    die("invalid role: '$the_role_label'");
}

function fix_author_role()
{
    $_REQUEST['in_author1_role'] = get_role_code_for_role_label(@$_REQUEST['in_author1_role']);
    $_REQUEST['in_author2_role'] = get_role_code_for_role_label(@$_REQUEST['in_author2_role']);
    $_REQUEST['in_author3_role'] = get_role_code_for_role_label(@$_REQUEST['in_author3_role']);
    $_REQUEST['in_author4_role'] = get_role_code_for_role_label(@$_REQUEST['in_author4_role']);
    $_REQUEST['in_author5_role'] = get_role_code_for_role_label(@$_REQUEST['in_author5_role']);
}


// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class PublisherBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "
<p><strong>3. Publisher &amp; copyright information</strong>.
Information about the source book you are seeking a clearance
for (make sure all data are substantiated by page images or
       other supplemental data.  At least one Year &amp; Type is
       required):
";
        }

        // publisher
        echo "\n<br>";
        if ($occ == Occasion::Request) echo "3a. ";
        echo "Publisher business name:\n";
        echo "<input type=\"text\" size=\"50\" name=\"in_publisher\"";
        if (isset($cr)) echo " value=\"" . eha($cr['publisher']) . "\"";
        echo ">\n";
        echo_db_column_width(240, $occ);

        // -----------

        echo "\n<br>";
        if ($occ == Occasion::Request) echo "3b. ";
        echo "Publication location:\n";
        if ($occ == Occasion::Request)
        {
            echo "(use the first/main city of the publisher, if you are not certain)\n<br>";
        }

        // publisher_city
        echo "City: ";
        echo "<input type=\"text\" size=\"20\" name=\"in_publisher_city\"";
        if (isset($cr)) echo " value=\"" . eha($cr['publisher_city']) . "\"";
        echo ">\n";
        echo_db_column_width(60, $occ);

        // publisher_country
        echo "Country (<a href='list-en1.html' target='_blank'>two-letter code</a>): ";
        echo "<input type=\"text\" size=\"2\" name=\"in_publisher_country\"";
        if (isset($cr)) echo " value=\"" . eha($cr['publisher_country']) . "\"";
        echo ">\n";
        echo_db_column_width(30, $occ);
    }

    static function validate_form_submission($occ)
    {
        return array(
            'publisher'         => @$_REQUEST['in_publisher'],
            'publisher_city'    => @$_REQUEST['in_publisher_city'],
            'publisher_country' => @$_REQUEST['in_publisher_country'],
        );
    }

    static function echo_html_for_table_display($cr)
    {
        echo_2col_tr(
            "<i>Publisher name</i>",
            ehe($cr['publisher'])
        );
        echo_2col_tr(
            "<i>Publisher city, country</i>",
            "<b>city</b>: "    . ehe($cr['publisher_city']) . ", " .
            "<b>country</b>: " . ehe($cr['publisher_country'])
        );
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class PubEventsBlock extends Block
// Publication dates & types
{
    static function echo_html_for_form($occ, $cr)
    {
        echo "\n<br>";
        if ($occ == Occasion::Request) echo "3c. ";
        if ($occ == Occasion::Request)
        {
            echo "Publication dates.\n";
            echo "Include at least the earliest and latest, if multiple dates are given.\n";
            echo "It is important to know whether a copyright notice, \"all rights reserved\" or similar claim is made.\n";
            echo "<i>No dates?</i>\n";
            echo "If there is no publication date in your book, please include library research in the Notes below or as an additional uploaded file, indicating catalog records with dates that match your printed book.\n";
            echo "Try ";
            echo "the <a href=\"http://catalog.loc.gov\">Library of Congress</a> for US publications,\n";
            echo "the <a href=\"http://catalogue.bl.uk\">British Library</a> for British,\n";
            echo "and other national libraries or <a href=\"http://abebooks.com\">abebooks.com</a> as needed.\n";
        }
        else
        {
            echo "Publication dates & types (add one if needed):\n";
        }

        for ($p = 1; $p <= 4; $p++)
        {
            if ($occ == Occasion::Request)
            {
                // Show all widgets.
                $show_it = TRUE;
            }
            else
            {
                // Always show the first;
                // for all others, show it if the previous is set.
                // (Allow adding up to one new item.)
                $pm1 = $p - 1;
                $show_it = ($p == 1 || strlen($cr["pubyear{$pm1}"]) > 0);
            }

            if ($show_it)
            {
                echo "\n<br>";

                echo "Year: <input type=\"text\" size=\"4\" name=\"in_pubyear{$p}\"";
                if (isset($cr)) echo " value=\"" . eha($cr["pubyear{$p}"]) . "\"";
                echo ">\n";
                echo_db_column_width(20, $occ);

                echo "Type (select one): \n";
                echo_selector_for_copytype("in_copytype{$p}", @$cr["copytype{$p}"]);
            }
        }
    }

    static function validate_form_submission($occ)
    {
        if (@$_REQUEST['in_pubyear1'] == '')
        {
            return array('ERROR:pubyear1' => "You must supply at least one publication year.");
        }

        // Munge copyright, to one digit numeric code:
        fix_copyright();

        return array(
            'pubyear1'  => @$_REQUEST['in_pubyear1'],
            'pubyear2'  => @$_REQUEST['in_pubyear2'],
            'pubyear3'  => @$_REQUEST['in_pubyear3'],
            'pubyear4'  => @$_REQUEST['in_pubyear4'],
            'copytype1' => $_REQUEST['in_copytype1'],
            'copytype2' => $_REQUEST['in_copytype2'],
            'copytype3' => $_REQUEST['in_copytype3'],
            'copytype4' => $_REQUEST['in_copytype4'],
        );
    }

    static function echo_html_for_table_display($cr)
    {
        global $label_for_copytype_code_;
        $row0 = array("year", "type");
        $rows = array();
        for ($p = 1; $p <= 4; $p++)
        {
            if ($cr["pubyear{$p}"] != '')
            {
                $rows[] = array(
                    ehe($cr["pubyear{$p}"]),
                    $label_for_copytype_code_[$cr["copytype{$p}"]]
                );
            }
        }
        if ($rows)
        {
            echo_2col_tr("<i>Publishings</i>", make_compact_table($row0, $rows));
        }
    }
}

// -------------------------------------------------------------------

$label_for_copytype_code_ = array(
    1  => "Copyright notice or similar",
    0  => "No copyright notice (just publication date)",
    2  => "Reprint or facsimile",
);

function echo_selector_for_copytype($control_name, $first_option_code)
{
    global $label_for_copytype_code_;

    assert(
        is_null($first_option_code)
        ||
        is_string($first_option_code) && strlen($first_option_code) == 1
    );

    echo "<select name=\"$control_name\">\n";

    $first_option_label = @$label_for_copytype_code_[$first_option_code];
    echo "<option>$first_option_label</option>\n";

    foreach ($label_for_copytype_code_ as $code => $label)
    {
        assert(is_integer($code));
        if (strval($code) !== $first_option_code) {
            print "<option>$label</option>\n";
        }
    }

    print "</select>\n";
}

function get_copytype_code_for_copytype_label($copytype_label)
{
    global $label_for_copytype_code_;

    if ($copytype_label == '') return 0;

    $copytype_code = array_search($copytype_label, $label_for_copytype_code_);
    if ($copytype_code === FALSE)
    {
        // $copytype_label was not found in $label_for_copytype_code_
        $esc_label = ehe($copytype_label);
        die("<p style='color:red'>Invalid copytype: '$esc_label'</p>\n");
    }
    return $copytype_code;
}

// Edit copyright statements to codes:
function fix_copyright()
{
    $_REQUEST['in_copytype1'] = get_copytype_code_for_copytype_label(@$_REQUEST['in_copytype1']);
    $_REQUEST['in_copytype2'] = get_copytype_code_for_copytype_label(@$_REQUEST['in_copytype2']);
    $_REQUEST['in_copytype3'] = get_copytype_code_for_copytype_label(@$_REQUEST['in_copytype3']);
    $_REQUEST['in_copytype4'] = get_copytype_code_for_copytype_label(@$_REQUEST['in_copytype4']);
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class PubNotesBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "\n<br>";
            echo "3d. ";
            echo "Notes about this source\n";
            echo "(including explanation for city, country, copyright, images, etc.):\n";
            echo "<br><textarea name=\"in_pub_notes\" rows=\"3\" cols=\"55\"></textarea>\n";
            echo_db_column_width(6000, $occ);
            echo "</p>\n";
        }
        elseif ($occ == Occasion::Adjudicate)
        {
            echo "\n<br>";
            echo "Publication notes from submitter:\n";
            $order   = array("\r\n", "\n", "\r");
            $tmpnote=str_replace($order,'<br>',$cr['pub_notes']);

            echo "<blockquote>$tmpnote</blockquote>\n\n";
        }
        else
        {
            assert(FALSE);
        }
    }

    static function validate_form_submission($occ)
    {
        if ($occ == Occasion::Request)
        {
            return array(
                'pub_notes' => @$_REQUEST['in_pub_notes'],
            );
        }
        elseif ($occ == Occasion::Adjudicate)
        {
            return array();
        }
        else
        {
            assert(FALSE);
        }
    }

    static function echo_html_for_table_display($cr)
    {
        if ($cr['pub_notes'] != '')
        {
            echo_2col_tr(
                "<i>Publication notes</i>",
                ehe($cr['pub_notes'])
            );
        }
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class PageScansBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "\n";
            echo "<p><strong>4. Page scans</strong>.\n";
            echo "We need title page and verso page, minimally.\n";
            echo "If they are not in English, provide a translation to English of the relevant parts\n";
            echo "in the Notes box or as an uploaded .txt file.\n";
            echo "At least one scan is required.  JPG, GIF or PNG format are preferred, right-side up.\n";

            // -----------------------

            echo "\n<br>";
            echo "4a. <font color=\"blue\"><strong>EITHER</strong></font>\n";
            echo "Files to upload now (up to 4 per clearance in PNG, GIF or JPEG, not zipped):\n";
            echo "<br>";
            for ($j = 1; $j <= 4; $j++)
            {
                echo "File$j:<input type=\"file\" name=\"upfile$j\">\n";
            }

            // -----------------------

            echo "\n<br>";
            echo "4a. <font color=\"blue\"><strong>OR</strong></font>\n";
            echo "Select from files you already delivered via\n";
            echo "<a href=\"/cgi-bin/upfiles\">Upload a Single File</a>\n";
            echo "<br>\n";

            // Get file listings in temporary directory:
            global $early_tpv_dir;
            $therefiles = array_diff( scandir($early_tpv_dir), array('.', '..') );

            for ($j = 1; $j <= 4; $j++)
            {
                echo "File$j:&nbsp;\n";
                echo "<select name=\"therefile$j\">\n";
                echo "<option></option>\n";
                foreach ($therefiles as $filename)
                {
                    echo "<option>$filename</option>\n";
                }
                echo "</select>\n";
            }

            echo "</p>\n";
        }
        elseif ($occ == Occasion::Adjudicate)
        {
            echo "\n<br>";
            echo PageScansBlock::_get_image_links($cr, $occ);
        }
        else
        {
            assert(FALSE);
        }

    }

    static function validate_form_submission($occ)
    {
        if ($occ == Occasion::Request)
        {
            if (@$_FILES['upfile1']['name'] == '' && @$_REQUEST['therefile1'] == '')
            {
                return array('ERROR:file1' => "You must supply at least one uploaded file.");
            }

            return array();
        }
        elseif ($occ == Occasion::Adjudicate)
        {
            return array();
        }
        else
        {
            assert(FALSE);
        }
    }

    static function echo_html_for_table_display($cr)
    {
        echo_2col_tr(
            "<i>Page Scans</i>",
            PageScansBlock::_get_image_links($cr, Occasion::Display)
        );
    }

    static function _get_image_links($cr, $occ)
    {
        $tpv_rel_dir = get_tpv_rel_dir($cr);

        global $tpv_root_dir, $tpv_root_url;
        $tpv_abs_dir = "$tpv_root_dir/$tpv_rel_dir";

        $handle = opendir($tpv_abs_dir);
        if (!$handle)
        {
            if ($occ == Occasion::Adjudicate)
            {
                return "<p><font color=\"red\">Something's wrong.  Image directory $tpv_abs_dir doesn't exist.  Fix or create (via command line) to view this item.  Or, take a risk on clearing anyway (the copy submission system should have forced at least one image to be submitted).</font></p>\n";
            }
            else
            {
                return "<p>(Problem locating images)</p>\n";
            }
        }

        $links = "";
        while (($file = readdir($handle)) !== FALSE)
        {
            if ($file == "." || $file == "..") continue;

            $url = "$tpv_root_url/$tpv_rel_dir/$file";

            if (str_endswith($file, '.txt') || str_endswith($file, '.TXT'))
            {
                $link_content = $file;
                $a_style = "style='vertical-align: top'";
            }
            else
            {
                // fixed-size images, but click for full resolution:
                $link_content = "<img src=\"$url\" alt=\"$file\" width=\"200\" height=\"325\">";
                $a_style = "";
            }

            $links .= "<a href=\"$url\" $a_style>$link_content</a>\n";
        }

        closedir($handle);

        return $links;
    }
}

function install_tpv_files(& $cr)
// Side-effect: sets $cr['tpv_abs_dir']
{
    $id = $cr['id'];

    // Process the files; create a directory for them to live in:
    global $tpv_root_dir;
    $tpv_abs_dir = $tpv_root_dir . "/" . get_tpv_rel_dir($cr);
    mkdirs ($tpv_abs_dir, 0755) or die ("mkdir $tpv_abs_dir failed!"); // recursive
    //  chgrp ($tpv_abs_dir, "copyright");

    $cr['tpv_abs_dir'] = $tpv_abs_dir;

    // Move uploaded files
    $filesuccess=0; // track success
    for ($j = 1; $j <= 4; $j++)
    {
        $param_name = "upfile$j";
        if (strlen(@$_FILES[$param_name]['name']))
        {
            $newname="$tpv_abs_dir/$id.$j" . get_extension($_FILES[$param_name]['name']);
            rename( $_FILES[$param_name]['tmp_name'], $newname);
            chmod ($newname, 0664);
            $filesuccess=1;
        }
    }

    // Or, move already uploaded files
    if ($filesuccess == 0)
    {
        global $early_tpv_dir;
        for ($j = 1; $j <= 4; $j++)
        {
            $param_name = "therefile$j";
            if (strlen(@$_REQUEST[$param_name]))
            {
                $newname="$tpv_abs_dir/$id.$j" .  get_extension($_REQUEST[$param_name]);
                rename( "$early_tpv_dir/" . $_REQUEST[$param_name], $newname);
                chmod ($newname, 0664);
                $filesuccess=1;
            }
        }
    }

    return $filesuccess;
}

function mkdirs($strPath, $mode)
{
    if (is_dir($strPath)) return true;

    $pStrPath = dirname($strPath);
    if (!mkdirs($pStrPath, $mode)) return false;
    return mkdir($strPath);
}

function get_extension($filename)
{
    $whichmatch = preg_match("/(\.[-a-zA-Z]+)+$/", $filename, $type);
    if ($whichmatch == 0)
    {
        $extension = '.jpg'; // just guess
    }
    else
    {
        $extension = $type[$whichmatch]; // type w/ period
    }
    return $extension;
}

function get_tpv_rel_dir($cr)
{
    // Figure out a directory path based on a timestamp.
    // This is not quite the same procedure as for posting PG eBooks,
    // because dates have a lot more characters.
    return preg_replace(
        '/^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/',
        '$1/$2/$3/$4$5$6',
        $cr['date_requested']
    );
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class ScansArchiveBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        if ($occ == Occasion::Request)
        {
            echo "\n";
            echo "<p><strong>5. Scans Archive</strong>.\n";
            echo "If the ebook will be prepared from page-scans of the above book,\n";
            echo "and if those scans are publically available online\n";
            echo "(e.g., at the Internet Archive or Gallica),\n";
            echo "please provide a URL to the scan-set:\n";
            echo "<br>";
            echo "<input type='text' size='100' name='in_scans_archive_url'>\n";
            echo_db_column_width(1600, $occ);
            echo "</p>";
        }
        else
        {
            $eha_url = eha(@$cr['scans_archive_url']);
            echo "\n<br>";
            echo "Scans archive:\n";
            if ($eha_url != '') echo "<a href='$eha_url'>link</a>\n";
            echo "<input type='text' size='100' name='in_scans_archive_url' value='$eha_url'>\n";
            echo_db_column_width(1600, $occ);
        }
    }

    static function validate_form_submission($occ)
    {
        $url = @$_REQUEST['in_scans_archive_url'];
        $url = trim($url);

        if ($url != '' && !preg_match('!^https?://!', $url))
        {
            return array('ERROR:scans_archive_url' => "Scan archive URL does not start with 'http://' or 'https://'");
        }

        return array(
            'scans_archive_url' => $url,
        );
    }

    static function echo_html_for_table_display($cr)
    {
        $url = $cr['scans_archive_url'];
        if ($url == '')
        {
            $link = '';
        }
        else
        {
            $eha_url = eha($url);
            $ehe_url = ehe($url);
            $link = "<a href='$eha_url'>$ehe_url</a>";
        }

        echo_2col_tr('<i>Scans archive</i>', $link);
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class RequestAutoBlock extends Block
// I.e., properties that are set automatically
// (at the time the request is submitted):
// requester + date-requested
{
    static function echo_html_for_form($occ, $cr)
    {
        assert( $occ == Occasion::Adjudicate );

        $prettydate = preg_replace(
            '/^(\d{4})-(\d{2})-(\d{2}) (\d{2}:\d{2}):\d{2}$/',
            '$2/$3/$1 $4', // m/d/y format
            $cr['date_requested']
        );

        $requester = $cr['+requester'];

        $url = "admin.php?alternate_username=$requester->username";

        echo "\n<br>Submission by <a href=\"$url\">$requester->username</a> at $prettydate\n";
    }

    static function validate_form_submission($occ)
    {
        return array(); // they're immutable
    }

    static function echo_html_for_table_display($cr)
    {
        // We need to handle time separately,
        // since mysql's timestamp fields can't be easily converted with PHP
        // (this seems to be a shortcoming of PHP)

        $request_id = $cr['id'];
        list($date_requested_u, $date_updated_u) =
            db_get_one_row('clearance_records', "id=$request_id", 'unix_timestamp(date_requested),unix_timestamp(date_updated)', 'N', "");

        $prettydate = date("h:i d M Y", $date_requested_u);
        echo_2col_tr("<i>Date submitted</i>", $prettydate);

        if ($cr['date_updated'] != '')
        {
            if ($date_requested_u != $date_updated_u)
            {
                $prettydate = date("h:i d M Y", $date_updated_u);
                echo_2col_tr("<i>Date updated</i>", $prettydate);
            }
        }
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class RequestKeyBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        $date_requested_digits = preg_replace('/\D/', '', $cr['date_requested']);
        $default_request_key = $date_requested_digits
          . substr(strtolower(nopunct_author($cr['author1_lastname'])), 0, 10);

        echo "\n<br>Clearance OK key: ";
        echo "<input type=\"text\" size=\"25\" name=\"in_request_key\" value=\""
          . $default_request_key . "\"> ";
        echo_db_column_width(32, $occ);
    }

    static function validate_form_submission($occ)
    {
        return array(
            'request_key' => $_REQUEST['in_request_key'],
        );
    }

    static function echo_html_for_table_display($cr)
    {
        if ($cr['request_key'] != '')
        {
            // This is kludgey, but 'copy' and 'upload'
            // might or might not be on the same server.
            // We only assume that their locations are 'parallel'.
            $url = "//" . $_SERVER['SERVER_NAME'] . $_SERVER['SCRIPT_NAME'];
            $url = preg_replace('/copy/', 'upload', $url);
            $url = preg_replace('/\/status.php$/', '/upload.php', $url);
            $url .= "?in_ok_key=" . $cr['request_key'];

            echo_2col_tr(
                "<i>Clearance OK key</i>",
                "<a href=\"$url\">" . $cr['request_key'] . "</a>" .
                "<br>" . "(click to upload finished eBook)"
            );
        }
    }
}

function nopunct_author ($name)
{
    $name= preg_replace("/[^a-zA-Z]/", "", $name);
    if (strlen($name) > 1) // min 2 characters
    {
        return $name;
    }
    else
    {
        $name .= "author";
        return $name;
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class NotesToRequesterBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        echo "\n<br>";
        echo "Optional notes TO the submitter (will be saved &amp; sent):\n";
        echo "<input type=\"text\" size=\"50\" name=\"in_notes_to_requester\" value=\""
            . eha($cr['notes_to_requester']) . "\">\n";
        echo_db_column_width(1300, $occ);
        echo "</p>\n";
    }

    static function validate_form_submission($occ)
    {
        return array(
            'notes_to_requester' => @$_REQUEST['in_notes_to_requester'],
        );
    }

    static function echo_html_for_table_display($cr)
    {
        if ($cr['notes_to_requester'] != '')
        {
            echo_2col_tr(
                "<i>Message from clearance team</i>",
                "<strong>" . ehe($cr['notes_to_requester']) . "</strong>"
            );
        }
    }
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class RulingBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        list($guess_color, $guess_short_text, $guess_long_text) = guess_ruling($cr);
        echo "<p><font color=\"$guess_color\">$guess_long_text</font></p>\n";

        echo "<p>";
        $prev_status_id = "OK";
        global $possible_rulings;
        foreach ($possible_rulings as $ruling)
        {
            // separate Accepts from Rejects
            if ($prev_status_id == Status::Accepted && $ruling->new_status_id != Status::Accepted)
            {
                echo "...\n";
            }
            $prev_status_id = $ruling->new_status_id;

            echo "<input type=\"submit\" name=\"in_ruling\" value=\"{$ruling->button_label}\">\n";
        }
        echo "...\n";
        echo "<a href=\"admin.php\">Back</a>\n";
        echo "<p>Note: Use the Notes field if needed to provide additional instruction to the submitter.\n";
        echo "\"Cancel\" will not send notification to the submitter - it's for duplicates, errors, etc.\n";
        echo "\"Rej: scopy\" sends a Not OK and sends the submitter to the HOWTO for contemporary works (use this for modern copyrighted stuff).\n";
        echo "\"Perm\" is for copyrighted items with a permission letter that we do want to process through the copy/upload system.\n";
        echo "</p>\n";
    }

    static function validate_form_submission($occ)
    {
        if (@$_REQUEST['in_ruling'] == '')
        {
            return array('ERROR:ruling' => "Parameter 'in_ruling' is not set.");
        }

        global $possible_rulings;
        $ruling = @$possible_rulings[$_REQUEST['in_ruling']];
        if (is_null($ruling))
        {
            return array('ERROR:ruling' => "No such ruling: '{$_REQUEST['in_ruling']}'");
        }

        return array(
            'EXTRA:ruling'       => $ruling, // kind of kludgey
            'status_id'          => $ruling->new_status_id,
            'rule_applied'       => $ruling->applied_rule,
            'pd_year'            => $ruling->pd_year,
        );
    }
}

$now = getdate();
$current_year = $now['year'];

// We're willing to give a Rule 1 clearance
// for a book that won't be PD for a couple years,
// as long as it isn't posted before it becomes PD.
//
// Make an array of the years for which we're willing to do this.
$n_years_in_future = 2;
$future_years = array();
for ($i = 1; $i <= $n_years_in_future; $i++)
{
    $future_years[] = $current_year + $i;
}


function guess_ruling($cr)
{
    global $current_year;

    // Rule 1:
    // Anything published before 95 years ago (i.e., before January 1 of that year)
    // should be public domain now.
    $latest = $cr['pubyear1'];
    if ( (strlen($cr['pubyear2']) > 1) && ($cr['pubyear2'] > $latest)) { $latest = $cr['pubyear2']; }
    if ( (strlen($cr['pubyear3']) > 1) && ($cr['pubyear3'] > $latest)) { $latest = $cr['pubyear3']; }
    if ( (strlen($cr['pubyear4']) > 1) && ($cr['pubyear4'] > $latest)) { $latest = $cr['pubyear4']; }

    if ($latest < $current_year - 95)
    {
        return array('blue', "Rule 1", "Looks like this might be Rule 1.");
    }

    // Check for a Rule 1 clearance in a future year.
    global $future_years;
    foreach ($future_years as $future_year)
    {
        if ($latest < $future_year - 95)
        {
            return array('blue', "Rule 1 for $future_year", "This might be Rule 1 for posting in <b>$future_year</b>.");
        }
    }

    if (strtoupper($cr['publisher_country']) == 'US')
    {
        // Try for rule 5:
        if ( $cr['copytype1'] == 0 &&
             $cr['copytype2'] == 0 &&
             $cr['copytype3'] == 0 &&
             $cr['copytype4'] == 0 )
        {
            return array('green', "Rule 5", "Looks like this might be Rule 5.");
        }
        else
        {
            // Some earlier, some later:
            return array('magenta', "5, 6, or Not OK", "Looks like mixed dates published in the US.  Could be Rule 5, or 6, or Not OK");
        }
    }

    return array('red', "Not OK", "Non-US post-1923, seems ineligible unless it's a reprint or matches pre-1923 text.");
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class StatusBlock extends Block
{
    static function echo_html_for_form($occ, $cr)
    {
        assert( $occ == Occasion::Adjudicate );

        global $status_blurb_for_rule_applied;
        echo "Current status=<strong>" . $status_blurb_for_rule_applied[$cr['rule_applied']] . "</strong>\n";
    }

    static function validate_form_submission($occ)
    {
        return array(); // no form-control
    }

    static function echo_html_for_table_display($cr)
    {
        global $label_for_status_id_, $status_blurb_for_rule_applied;

        echo_2col_tr(
            "<i>Status</i>",
            "<strong>" . $label_for_status_id_[$cr['status_id']] . "</strong>"
        );

        if ($cr['status_id'] == Status::Accepted)
        {
            $url = "http://gutenberg.net/howtos/copyright-howto";
            echo_2col_tr(
                "<i>Main <a href=\"$url\">rule</a> applied</i>",
                $status_blurb_for_rule_applied[$cr['rule_applied']]
            );
            if ($cr['pd_year'])
            {
                echo_2col_tr(
                    "<i>Do not upload before</i>",
                    "January 1, {$cr['pd_year']}"
                );
            }
        }
    }
}

$status_blurb_for_rule_applied = array(
  0  => 'AwaitingClearance',
  1  => 'OK: Rule 1',
  5  => 'OK: Rule 5',
  6  => 'OK: Rule 6',
  8  => 'OK: Rule 8',
  11 => 'OK: Perm',
  9  => 'Not OK',
  10 => 'Not OK',
);

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

function echo_db_column_width($n, $occ)
{
    if ($occ == Occasion::Upload)
    {
        // Don't show it, because Upload doesn't entail a db save.
    }
    else
    {
        echo "<span style='font-size: 65%'>[$n]</span>\n";
    }
}

function echo_2col_tr($col1, $col2)
{
    echo "<tr>";
    echo "<td>$col1</td>";
    echo "<td>$col2</td>";
    echo "</tr>\n";
}

function make_compact_table($row0, $rows)
{
    $n_columns = count($row0);

    $text = "\n";
    $text .= "  <table class='compact'>\n";

    $text .= "  <tr>";
    foreach ($row0 as $x)
    {
        $text .= "<th>$x</th>";
    }
    $text .= "</tr>\n";

    foreach ($rows as $row)
    {
        $text .= "  <tr>";
        foreach ($row as $x)
        {
            $text .= "<td>$x</td>";
        }
        $text .= "<tr>\n";
    }

    $text .= "  </table>\n";

    return $text;
}

# vim: sw=4 ts=4 expandtab
